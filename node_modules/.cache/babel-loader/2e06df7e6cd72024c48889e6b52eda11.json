{"ast":null,"code":"var _jsxFileName = \"/home/chetan/Desktop/B231WD/React/React-Tasks/react-task03-dashboard/src/Components/User/AddUser.js\",\n    _s = $RefreshSig$();\n\nimport \"./AddUser.css\";\nimport Card from \"@material-ui/core/Card\";\nimport { useForm } from \"react-hook-form\";\nimport { Container } from \"@material-ui/core\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function AddUser() {\n  _s();\n\n  const {\n    register,\n    formState: {\n      errors\n    },\n    handleSubmit\n  } = useForm();\n\n  const onSubmit = data => {\n    addUserFun(data);\n  };\n\n  return /*#__PURE__*/_jsxDEV(Card, {\n    children: /*#__PURE__*/_jsxDEV(Container, {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"MyForm\",\n        children: /*#__PURE__*/_jsxDEV(\"form\", {\n          onSubmit: handleSubmit(onSubmit),\n          children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n            children: \"Create Users\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 20,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(CustomNameInput, {\n            label: \"Name\",\n            register: register,\n            errors: errors\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 21,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(CustomNameInput, {\n            label: \"Avatar\",\n            register: register,\n            errors: errors\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 26,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"submit\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 32,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 19,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 18,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 16,\n    columnNumber: 11\n  }, this);\n}\n\n_s(AddUser, \"fS2WByNE2zdixcbXAQsoZ/juHrw=\", false, function () {\n  return [useForm];\n});\n\n_c = AddUser;\n\nfunction CustomNameInput({\n  label,\n  register,\n  errors\n}) {\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n      children: label\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      placeholder: label,\n      ...register(label, {\n        required: true,\n        minLength: 3\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 9\n    }, this), errors[label] && errors[label].type === \"required\" && /*#__PURE__*/_jsxDEV(\"p\", {\n      style: {\n        color: \"red\"\n      },\n      children: \"This input is required\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 11\n    }, this), errors[label] && errors[label].type === \"minLength\" && /*#__PURE__*/_jsxDEV(\"p\", {\n      style: {\n        color: \"red\"\n      },\n      children: \"Min Length should be 3\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 11\n    }, this)]\n  }, void 0, true);\n}\n\n_c2 = CustomNameInput;\n\nasync function addUserFun(data) {\n  let userData = {\n    name: data.name,\n    avatar: data.avatar,\n    createdAt: Date.now()\n  };\n  await fetch(\"https://609e2b8c33eed80017957ee5.mockapi.io/users\", {\n    method: \"POST\",\n    body: JSON.stringify(userData)\n  });\n}\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"AddUser\");\n$RefreshReg$(_c2, \"CustomNameInput\");","map":{"version":3,"sources":["/home/chetan/Desktop/B231WD/React/React-Tasks/react-task03-dashboard/src/Components/User/AddUser.js"],"names":["Card","useForm","Container","AddUser","register","formState","errors","handleSubmit","onSubmit","data","addUserFun","CustomNameInput","label","required","minLength","type","color","userData","name","avatar","createdAt","Date","now","fetch","method","body","JSON","stringify"],"mappings":";;;AAAA,OAAO,eAAP;AACA,OAAOA,IAAP,MAAiB,wBAAjB;AACA,SAASC,OAAT,QAAwB,iBAAxB;AACA,SAASC,SAAT,QAA0B,mBAA1B;;;AAEA,eAAe,SAASC,OAAT,GAAkB;AAAA;;AAC7B,QAAM;AACFC,IAAAA,QADE;AAEFC,IAAAA,SAAS,EAAE;AAAEC,MAAAA;AAAF,KAFT;AAGFC,IAAAA;AAHE,MAIAN,OAAO,EAJb;;AAME,QAAMO,QAAQ,GAAIC,IAAD,IAAU;AAACC,IAAAA,UAAU,CAACD,IAAD,CAAV;AAAiB,GAA7C;;AAEA,sBACI,QAAC,IAAD;AAAA,2BACF,QAAC,SAAD;AAAA,6BACE;AAAK,QAAA,SAAS,EAAC,QAAf;AAAA,+BACE;AAAM,UAAA,QAAQ,EAAEF,YAAY,CAACC,QAAD,CAA5B;AAAA,kCACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADF,eAEE,QAAC,eAAD;AACE,YAAA,KAAK,EAAC,MADR;AAEE,YAAA,QAAQ,EAAEJ,QAFZ;AAGE,YAAA,MAAM,EAAEE;AAHV;AAAA;AAAA;AAAA;AAAA,kBAFF,eAOE,QAAC,eAAD;AACE,YAAA,KAAK,EAAC,QADR;AAEE,YAAA,QAAQ,EAAEF,QAFZ;AAGE,YAAA,MAAM,EAAEE;AAHV;AAAA;AAAA;AAAA;AAAA,kBAPF,eAaE;AAAO,YAAA,IAAI,EAAC;AAAZ;AAAA;AAAA;AAAA;AAAA,kBAbF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADE;AAAA;AAAA;AAAA;AAAA,UADJ;AAuBL;;GAhCuBH,O;UAKdF,O;;;KALcE,O;;AAiCxB,SAASQ,eAAT,CAAyB;AAAEC,EAAAA,KAAF;AAASR,EAAAA,QAAT;AAAmBE,EAAAA;AAAnB,CAAzB,EAAsD;AAClD,sBACE;AAAA,4BACE;AAAA,gBAAQM;AAAR;AAAA;AAAA;AAAA;AAAA,YADF,eAEE;AACE,MAAA,WAAW,EAAEA,KADf;AAAA,SAEMR,QAAQ,CAACQ,KAAD,EAAQ;AAClBC,QAAAA,QAAQ,EAAE,IADQ;AAElBC,QAAAA,SAAS,EAAE;AAFO,OAAR;AAFd;AAAA;AAAA;AAAA;AAAA,YAFF,EASGR,MAAM,CAACM,KAAD,CAAN,IAAiBN,MAAM,CAACM,KAAD,CAAN,CAAcG,IAAd,KAAuB,UAAxC,iBACC;AAAG,MAAA,KAAK,EAAE;AAAEC,QAAAA,KAAK,EAAE;AAAT,OAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAVJ,EAaGV,MAAM,CAACM,KAAD,CAAN,IAAiBN,MAAM,CAACM,KAAD,CAAN,CAAcG,IAAd,KAAuB,WAAxC,iBACC;AAAG,MAAA,KAAK,EAAE;AAAEC,QAAAA,KAAK,EAAE;AAAT,OAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAdJ;AAAA,kBADF;AAmBD;;MApBML,e;;AAqBP,eAAeD,UAAf,CAA0BD,IAA1B,EAA+B;AAE7B,MAAIQ,QAAQ,GAAG;AACbC,IAAAA,IAAI,EAAET,IAAI,CAACS,IADE;AAEbC,IAAAA,MAAM,EAAEV,IAAI,CAACU,MAFA;AAGbC,IAAAA,SAAS,EAAEC,IAAI,CAACC,GAAL;AAHE,GAAf;AAKA,QAAMC,KAAK,CAAC,mDAAD,EAAsD;AAC/DC,IAAAA,MAAM,EAAE,MADuD;AAE/DC,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeV,QAAf;AAFyD,GAAtD,CAAX;AAKH","sourcesContent":["import \"./AddUser.css\";\nimport Card from \"@material-ui/core/Card\";\nimport { useForm } from \"react-hook-form\";\nimport { Container } from \"@material-ui/core\";\n\nexport default function AddUser(){\n    const {\n        register,\n        formState: { errors },\n        handleSubmit\n      } = useForm();\n    \n      const onSubmit = (data) => {addUserFun(data)}\n    \n      return (\n          <Card>\n        <Container>\n          <div className=\"MyForm\">\n            <form onSubmit={handleSubmit(onSubmit)}>\n              <h1>Create Users</h1>\n              <CustomNameInput\n                label=\"Name\"\n                register={register}\n                errors={errors}\n              />\n              <CustomNameInput\n                label=\"Avatar\"\n                register={register}\n                errors={errors}\n              />\n    \n              <input type=\"submit\" />\n            </form>\n          </div>\n        </Container>\n        </Card>\n      );\n}\nfunction CustomNameInput({ label, register, errors }) {\n    return (\n      <>\n        <label>{label}</label>\n        <input\n          placeholder={label}\n          {...register(label, {\n            required: true,\n            minLength: 3\n          })}\n        />\n        {errors[label] && errors[label].type === \"required\" && (\n          <p style={{ color: \"red\" }}>This input is required</p>\n        )}\n  \n        {errors[label] && errors[label].type === \"minLength\" && (\n          <p style={{ color: \"red\" }}>Min Length should be 3</p>\n        )}\n      </>\n    );\n  }\n  async function addUserFun(data){\n        \n    let userData = {\n      name: data.name,\n      avatar: data.avatar,\n      createdAt: Date.now()\n    };\n    await fetch(\"https://609e2b8c33eed80017957ee5.mockapi.io/users\", {\n      method: \"POST\",\n      body: JSON.stringify(userData)\n    });\n  \n}"]},"metadata":{},"sourceType":"module"}