{"ast":null,"code":"var _jsxFileName = \"/home/chetan/Desktop/B231WD/React/React-Tasks/react-task03-dashboard/src/MyBarChart.js\",\n    _s = $RefreshSig$();\n\nimport React, { useRef, useEffect } from 'react';\nimport { Chart } from \"react-chartjs-2\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction number_format(number, decimals, dec_point, thousands_sep) {\n  // *     example: number_format(1234.56, 2, ',', ' ');\n  // *     return: '1 234,56'\n  number = (number + '').replace(',', '').replace(' ', '');\n\n  var n = !isFinite(+number) ? 0 : +number,\n      prec = !isFinite(+decimals) ? 0 : Math.abs(decimals),\n      sep = typeof thousands_sep === 'undefined' ? ',' : thousands_sep,\n      dec = typeof dec_point === 'undefined' ? '.' : dec_point,\n      s = '',\n      toFixedFix = function (n, prec) {\n    var k = Math.pow(10, prec);\n    return '' + Math.round(n * k) / k;\n  }; // Fix for IE parseFloat(0.55).toFixed(0) = 0;\n\n\n  s = (prec ? toFixedFix(n, prec) : '' + Math.round(n)).split('.');\n\n  if (s[0].length > 3) {\n    s[0] = s[0].replace(/\\B(?=(?:\\d{3})+(?!\\d))/g, sep);\n  }\n\n  if ((s[1] || '').length < prec) {\n    s[1] = s[1] || '';\n    s[1] += new Array(prec - s[1].length + 1).join('0');\n  }\n\n  return s.join(dec);\n}\n\nconst MyBarChart = props => {\n  _s();\n\n  const canvasRef = useRef(null);\n\n  const draw = ctx => {\n    var myBarChart = new Chart(ctx, {\n      type: 'bar',\n      data: {\n        labels: [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\"],\n        datasets: [{\n          label: \"Revenue\",\n          backgroundColor: \"#4e73df\",\n          hoverBackgroundColor: \"#2e59d9\",\n          borderColor: \"#4e73df\",\n          data: [4215, 5312, 6251, 7841, 9821, 14984]\n        }]\n      },\n      options: {\n        maintainAspectRatio: false,\n        layout: {\n          padding: {\n            left: 10,\n            right: 25,\n            top: 25,\n            bottom: 0\n          }\n        },\n        scales: {\n          xAxes: [{\n            time: {\n              unit: 'month'\n            },\n            gridLines: {\n              display: false,\n              drawBorder: false\n            },\n            ticks: {\n              maxTicksLimit: 6\n            },\n            maxBarThickness: 25\n          }],\n          yAxes: [{\n            ticks: {\n              min: 0,\n              max: 15000,\n              maxTicksLimit: 5,\n              padding: 10,\n              // Include a dollar sign in the ticks\n              callback: function (value, index, values) {\n                return '$' + number_format(value);\n              }\n            },\n            gridLines: {\n              color: \"rgb(234, 236, 244)\",\n              zeroLineColor: \"rgb(234, 236, 244)\",\n              drawBorder: false,\n              borderDash: [2],\n              zeroLineBorderDash: [2]\n            }\n          }]\n        },\n        legend: {\n          display: false\n        },\n        tooltips: {\n          titleMarginBottom: 10,\n          titleFontColor: '#6e707e',\n          titleFontSize: 14,\n          backgroundColor: \"rgb(255,255,255)\",\n          bodyFontColor: \"#858796\",\n          borderColor: '#dddfeb',\n          borderWidth: 1,\n          xPadding: 15,\n          yPadding: 15,\n          displayColors: false,\n          caretPadding: 10,\n          callbacks: {\n            label: function (tooltipItem, chart) {\n              var datasetLabel = chart.datasets[tooltipItem.datasetIndex].label || '';\n              return datasetLabel + ': $' + number_format(tooltipItem.yLabel);\n            }\n          }\n        }\n      }\n    });\n  };\n\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    const context = canvas.getContext('2d'); //Our draw come here\n\n    draw(context);\n  }, [draw]);\n  return /*#__PURE__*/_jsxDEV(\"canvas\", {\n    ref: canvasRef,\n    ...props\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 128,\n    columnNumber: 10\n  }, this);\n};\n\n_s(MyBarChart, \"UJgi7ynoup7eqypjnwyX/s32POg=\");\n\n_c = MyBarChart;\nexport default MyBarChart;\n\nvar _c;\n\n$RefreshReg$(_c, \"MyBarChart\");","map":{"version":3,"sources":["/home/chetan/Desktop/B231WD/React/React-Tasks/react-task03-dashboard/src/MyBarChart.js"],"names":["React","useRef","useEffect","Chart","number_format","number","decimals","dec_point","thousands_sep","replace","n","isFinite","prec","Math","abs","sep","dec","s","toFixedFix","k","pow","round","split","length","Array","join","MyBarChart","props","canvasRef","draw","ctx","myBarChart","type","data","labels","datasets","label","backgroundColor","hoverBackgroundColor","borderColor","options","maintainAspectRatio","layout","padding","left","right","top","bottom","scales","xAxes","time","unit","gridLines","display","drawBorder","ticks","maxTicksLimit","maxBarThickness","yAxes","min","max","callback","value","index","values","color","zeroLineColor","borderDash","zeroLineBorderDash","legend","tooltips","titleMarginBottom","titleFontColor","titleFontSize","bodyFontColor","borderWidth","xPadding","yPadding","displayColors","caretPadding","callbacks","tooltipItem","chart","datasetLabel","datasetIndex","yLabel","canvas","current","context","getContext"],"mappings":"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","sourcesContent":["\n\n\nimport React, { useRef, useEffect } from 'react'\nimport {Chart} from \"react-chartjs-2\"\n\nfunction number_format(number, decimals, dec_point, thousands_sep) {\n    // *     example: number_format(1234.56, 2, ',', ' ');\n    // *     return: '1 234,56'\n    number = (number + '').replace(',', '').replace(' ', '');\n    var n = !isFinite(+number) ? 0 : +number,\n      prec = !isFinite(+decimals) ? 0 : Math.abs(decimals),\n      sep = (typeof thousands_sep === 'undefined') ? ',' : thousands_sep,\n      dec = (typeof dec_point === 'undefined') ? '.' : dec_point,\n      s = '',\n      toFixedFix = function(n, prec) {\n        var k = Math.pow(10, prec);\n        return '' + Math.round(n * k) / k;\n      };\n    // Fix for IE parseFloat(0.55).toFixed(0) = 0;\n    s = (prec ? toFixedFix(n, prec) : '' + Math.round(n)).split('.');\n    if (s[0].length > 3) {\n      s[0] = s[0].replace(/\\B(?=(?:\\d{3})+(?!\\d))/g, sep);\n    }\n    if ((s[1] || '').length < prec) {\n      s[1] = s[1] || '';\n      s[1] += new Array(prec - s[1].length + 1).join('0');\n    }\n    return s.join(dec);\n  }\n\nconst MyBarChart = props => {\n  \n  const canvasRef = useRef(null)\n  \n  const draw = ctx => {\n    var myBarChart = new Chart(ctx, {\n        type: 'bar',\n        data: {\n          labels: [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\"],\n          datasets: [{\n            label: \"Revenue\",\n            backgroundColor: \"#4e73df\",\n            hoverBackgroundColor: \"#2e59d9\",\n            borderColor: \"#4e73df\",\n            data: [4215, 5312, 6251, 7841, 9821, 14984],\n          }],\n        },\n        options: {\n          maintainAspectRatio: false,\n          layout: {\n            padding: {\n              left: 10,\n              right: 25,\n              top: 25,\n              bottom: 0\n            }\n          },\n          scales: {\n            xAxes: [{\n              time: {\n                unit: 'month'\n              },\n              gridLines: {\n                display: false,\n                drawBorder: false\n              },\n              ticks: {\n                maxTicksLimit: 6\n              },\n              maxBarThickness: 25,\n            }],\n            yAxes: [{\n              ticks: {\n                min: 0,\n                max: 15000,\n                maxTicksLimit: 5,\n                padding: 10,\n                // Include a dollar sign in the ticks\n                callback: function(value, index, values) {\n                  return '$' + number_format(value);\n                }\n              },\n              gridLines: {\n                color: \"rgb(234, 236, 244)\",\n                zeroLineColor: \"rgb(234, 236, 244)\",\n                drawBorder: false,\n                borderDash: [2],\n                zeroLineBorderDash: [2]\n              }\n            }],\n          },\n          legend: {\n            display: false\n          },\n          tooltips: {\n            titleMarginBottom: 10,\n            titleFontColor: '#6e707e',\n            titleFontSize: 14,\n            backgroundColor: \"rgb(255,255,255)\",\n            bodyFontColor: \"#858796\",\n            borderColor: '#dddfeb',\n            borderWidth: 1,\n            xPadding: 15,\n            yPadding: 15,\n            displayColors: false,\n            caretPadding: 10,\n            callbacks: {\n              label: function(tooltipItem, chart) {\n                var datasetLabel = chart.datasets[tooltipItem.datasetIndex].label || '';\n                return datasetLabel + ': $' + number_format(tooltipItem.yLabel);\n              }\n            }\n          },\n        }\n      });\n  }\n  \n  useEffect(() => {\n    \n    const canvas = canvasRef.current\n    const context = canvas.getContext('2d')\n    \n    //Our draw come here\n    draw(context)\n  }, [draw])\n  \n  return <canvas ref={canvasRef} {...props}/>\n}\n\nexport default MyBarChart"]},"metadata":{},"sourceType":"module"}